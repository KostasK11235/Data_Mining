# heatmap diagram
columns = ['Date', 'Daily tests', 'Cases', 'Deaths']
df.drop(columns, axis=1).drop_duplicates().hist(bins=15, figsize=(16, 9), rwidth=0.8)
plt.show()

# Keep the last line (date) for each country and drop unused columns
df_last = df.groupby('Entity').tail(1).drop(['Entity', 'Date'], axis=1)
# plt.figure(figsize=(12, 8))
sns.heatmap(df_last.corr(numeric_only=True), annot=True, cmap=plt.cm.Reds)
plt.show()

# boxplot diagrams
for column in df.drop(['Entity', 'Continent', 'Date', 'Cases', 'Deaths'], axis=1):
    plt.figure()
    df.boxplot([column])
    plt.show()

Average temp per year, Hosp beds per 1000 ppl, MD Docs per 1000, Population, Median age,Pop aged 65 and over, date, daily tests, cases, deaths 
# plot the number of tests done each given date
df['Date'] = pd.to_datetime(df['Date'])
tests_by_date = df.groupby('Date')['Daily tests'].sum()

# create a line plot
plt.plot(tests_by_date.index, tests_by_date.values)
plt.title('Number of tests each date')
plt.xlabel('Date')
plt.ylabel('Number of tests')
plt.show()

print("Info: \n", df.dtypes)
 
# get the number of null values in each column
print("Number of null values in data:\n", df.isnull().sum())

# Describe values: number of values, min, max, mean, standard deviation, Q1, Q2 and Q3 quartiles
print("Describe: \n", df.describe().round(3).to_string())

rows_per_country = df.groupby('Entity').size()
print(rows_per_country.values)

nulls_per_country = df.groupby('Entity').apply(lambda x: x.isnull().sum())
print(nulls_per_country)

# store and print the countries where missing data from columns 'Daily tests','Cases','Deaths' are more than half country's data
bad_data = 0
countries_to_remove = []
for i in range(0, 104):
    for j in range(12, 15):
        # print("->", rows_per_country.values[i] - nulls_per_country.values[i][j])
        if (rows_per_country.values[i] - nulls_per_country.values[i][j]) < rows_per_country.values[i]/2:
            bad_data = 1
    if bad_data:
        countries_to_remove.append(nulls_per_country.index[i])
        print("Country name: ", nulls_per_country.index[i], ",Total values: ", rows_per_country.values[i],
              ",Nulls: Daily tests: ", nulls_per_country.values[i][12], ",Cases: ", nulls_per_country.values[i][13],
              ",Deaths: ", nulls_per_country.values[i][14])
        bad_data = 0

# remove from dataframe all countries found in the previous step
for country_name in countries_to_remove:
    df = df.drop(df.loc[df['Entity'] == country_name].index)